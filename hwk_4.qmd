---
title: "HWK 4"
author: "Emma Bea Mitchell"
format: html
editor_options: 
  chunk_output_type: console
---

red abalone - Haliotis rufescens

#### Load libraries

```{r}
# Load packages
library(tidyverse)
library(here)
library(tmap)
library(stars)
library(terra)
library(sf)
library(raster)
```

#### Read in data

```{r}
# Read in data
wc_eez <- st_read(here("data", "data", 'wc_regions_clean.shp'))
temp_2008 <- rast(here("data", "data", "average_annual_sst_2008.tif"))
temp_2009 <- rast(here("data", "data", "average_annual_sst_2009.tif"))
temp_2010 <- rast(here("data", "data", "average_annual_sst_2010.tif"))
temp_2011 <- rast(here("data", "data", "average_annual_sst_2011.tif"))
temp_2012 <- rast(here("data", "data", "average_annual_sst_2012.tif"))
depth <- rast(here("data", "data", "depth.tif"))
```

## Process data

```{r}
# combine temp rasters into stack
sst_stack <- c(temp_2008, temp_2009, temp_2010, temp_2011, temp_2012)
```


```{r}
# Check if crs match
# make into function or for loop
st_crs(sst_stack) == st_crs(depth)
st_crs(depth) == st_crs(wc_eez)
st_crs(sst_stack) == st_crs(wc_eez)

sst_stack_recrs <- project(sst_stack, crs(depth))

```


```{r}
# Find average SST
mean_sst <- app(sst_stack_recrs, mean, na.rm = TRUE)

# Convert average SST from Kelvin to Celsius
mean_sst_c <- mean_sst - 273.15

```


```{r}
# Crop depth raster to match the extent of the SST raster

depth_crop <- crop(depth, mean_sst_c)

# Resample the depth data to match the resolution of the SST data using the nearest neighbor approach

depth_resample <- resample(depth_crop, mean_sst_c, method = "near")

# check that the depth and SST match in resolution, extent, and coordinate reference system
# make this into if else statement?

sst_depth <- c(depth_resample, mean_sst_c)

```

## Find suitable locations

oysters:
sea surface temperature: 11-30°C
depth: 0-70 meters below sea level

red abalone: 
sea surface temperature: 8°C - 18°C 
depth: 0-24 meters below sea level

```{r}
# Define the suitable SST range
oyster_sst <- ifel(mean_sst_c >= 11 & mean_sst_c <= 30, 1, 0)

# Define the suitable depth range
oyster_depth <- ifel(depth_resample >= 0 & depth_resample <= 70, 1, 0)

# make function 
oyster_fun <- function(oyster_depth, oyster_sst){
 oyster_locations <- ifel(oyster_sst == 1 & oyster_depth == 1, 1, 0)
  return(oyster_locations)
}  

oyster_locations <- oyster_fun(oyster_depth, oyster_sst)

plot(oyster_locations)
```

## Determine the most suitable EEZ

```{r}
# select suitable cells within west coast EEZs

oyster_locations_vec <- as.polygons(oyster_locations) |>
  st_as_sf() |>
  mutate(suitable = mean == 1)

## I'm honestly not sure if I should do any of the below code chunk, the intention was to find the intersection of the suitable oyster and eez data for each eez. In actuality, I think creating these new variables may have been unnecessary. Maybe I can work with the rows in the wc_eez column instead. Otherwise maybe don't do the intersection in the for loop, and instead recombine geometries and then do intersection with combined geometries. Does that make sense to do when simply trying to identify suitable cells within wc_eezs. I think I may be working too much with wc_eez data when I should be working with manipulating oyster data

## make this into a function/for loop
oregon_eez <- wc_eez |> 
  filter(rgn == "Oregon") |> 
  dplyr::select(rgn, geometry)



# Define the function to filter and select for a specific region
eez_region <- function(data, region_name) {
  filtered_data <- data %>%
    filter(rgn == region_name) %>%
    dplyr::select(rgn, geometry)
  return(filtered_data)
}

regions <- c("Oregon", "Northern California", "Central California", "Southern California", "Washington")

# Loop through each region and find intersections and assign the filtered data into a new variable 
for (region in regions) { 
  variable_name <- gsub(" ", "_", region) 
  filtered_data <- eez_region(wc_eez, region)
  intersection <- st_intersection(filtered_data, oyster_locations_vec)
  assign(paste0(variable_name, "_intersection"), intersection)
  }

```


```{r}

# need to rasterize data????
wc_eez_rast <- rasterize(wc_eez)
```

