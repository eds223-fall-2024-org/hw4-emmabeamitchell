---
title: "HWK 4"
author: "Emma Bea Mitchell"
format: html
editor_options: 
  chunk_output_type: console
---

red abalone - Haliotis rufescens

#### Load libraries

```{r}
# Load packages
library(tidyverse)
library(here)
library(tmap)
library(stars)
library(terra)
library(sf)
library(raster)
library(kableExtra)
```

#### Read in data

```{r}
# Read in data
wc_eez <- st_read(here("data", "data", 'wc_regions_clean.shp'))
temp_2008 <- rast(here("data", "data", "average_annual_sst_2008.tif"))
temp_2009 <- rast(here("data", "data", "average_annual_sst_2009.tif"))
temp_2010 <- rast(here("data", "data", "average_annual_sst_2010.tif"))
temp_2011 <- rast(here("data", "data", "average_annual_sst_2011.tif"))
temp_2012 <- rast(here("data", "data", "average_annual_sst_2012.tif"))
depth <- rast(here("data", "data", "depth.tif"))
```

## Process data

```{r}
# combine temp rasters into stack
sst_stack <- c(temp_2008, temp_2009, temp_2010, temp_2011, temp_2012)
```


```{r}
# Check if crs match
# make into function or for loop
st_crs(sst_stack) == st_crs(depth)
st_crs(depth) == st_crs(wc_eez)
st_crs(sst_stack) == st_crs(wc_eez)

sst_stack_recrs <- project(sst_stack, crs(depth))

```


```{r}
# Find average SST
mean_sst <- app(sst_stack, mean)

# Convert average SST from Kelvin to Celsius
mean_sst_c <- mean_sst - 273.15

```


```{r}
# Crop depth raster to match the extent of the SST raster

depth_crop <- crop(depth, mean_sst_c)

# Resample the depth data to match the resolution of the SST data using the nearest neighbor approach

depth_resample <- resample(depth_crop, mean_sst_c, method = "near")

# check that the depth and SST match in resolution, extent, and coordinate reference system
# make this into if else statement? # test again at bottom?

sst_depth <- merge(depth_resample, mean_sst_c)

```

## Find suitable locations

oysters:
sea surface temperature: 11-30°C
depth: 0-70 meters below sea level

red abalone: 
sea surface temperature: 8°C - 18°C 
depth: 0-24 meters below sea level

```{r}
oyster_sst <- matrix(c(-Inf, 11, 0,
                11, 30, 1, 
                30, Inf, 0),
                ncol = 3, byrow = TRUE)


oyster_depth <- matrix(c(-Inf, 0, 0,
                          0, 70, 1, 
                         70, Inf, 0),
                     ncol = 3, byrow = TRUE)

# use reclassification matrix to reclassify elevation raster
reclassified_sst <- classify(mean_sst_c, rcl = oyster_sst)

plot(reclassified_sst)
reclassified_depth <- classify(depth_resample, rcl = oyster_depth)


reclass_all <- reclassified_sst * reclassified_depth

plot(reclass_all)
```

## Determine the most suitable EEZ

```{r}
# cropping suitable oyster locations to the eezs 

# rasterize eez data
wc_eez_rast <- rasterize(wc_eez, reclass_all, "rgn")

plot(wc_eez_rast)

# Crop oyster_locations to the extent of wc_eez_rast
cropped_oyster_locations <- crop(reclass_all, wc_eez_rast)

plot(cropped_oyster_locations)

# Mask the cropped oyster_locations with wc_eez_rast
oyster_eez <- mask(cropped_oyster_locations, wc_eez_rast)

# Plot the result
plot(oyster_eez, main = "Intersected Oyster Locations with EEZ")

tm_shape(wc_eez_rast) +
  tm_raster() 

zonal_oyster <- zonal(oyster_eez, wc_eez_rast, fun = "sum", na.rm = TRUE) 
zonal_oyster


area_cell <- cellSize(oyster_eez)
the_answer <- oyster_eez * area_cell

# zonal : summarize values in SpatRaster x based on zones in SpatRaster y

zonal_answer <- zonal(the_answer, wc_eez_rast, fun = "sum", na.rm = TRUE) 
zonal_answer
```

## Make a function

```{r}
files <- list.files(here("data", "data"), pattern = "average", full.names = TRUE)

suitable_function <- function (i) {
  sst <- rast(files[i])
  transform crs
  process SST (mean, Cel)
  crop, resample
  reclassify
  sst depth multiplication
  rasterize eez
  crop and mask to eez
  find area of grid cells
  find total suitable area
}



```


```{r}
if crs(sst_stack) == crs(depth) & crs(sst_stack) == crs(wc_eez) & crs(dept) == crs(wc_eez) {
  message("CRSs match") 
} else { 
  warning("CRSs do not match")
}

```

